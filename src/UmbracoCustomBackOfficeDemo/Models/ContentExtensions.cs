using System;
using System.Collections.Generic;
using System.Linq;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using PublishedContentModel = Umbraco.CodeGen.WaitForSixTwo.PublishedContentModel;

namespace UmbracoCustomBackOfficeDemo.Models
{
    /// <summary>
    /// Contains methods for converting IPublished content to document type 
    /// models generated by CodeGen plug-in 
    /// </summary>
    public static class ContentExtensions
    {
        /// <summary>
        /// Converts a <see cref="IPublishedContent"/> instance to the requested document
        /// type class created by Umbraco.CodeGen. If the content is already an instance 
        /// of the requested type, then it is cast to the requested type, otherwise a 
        /// new document type model wrapping the content is created.
        /// </summary>
        /// <typeparam name="TDocument"></typeparam>
        /// <param name="content"></param>
        /// <returns></returns>
        public static TDocument As<TDocument>(this IPublishedContent content)
            where TDocument : PublishedContentModel
        {
            var document = content as PublishedContentModel
                ?? PublishedContentModelFactoryResolver.Current.Factory.CreateModel(content);

            if (document is TDocument)
            {
                return document as TDocument;
            }
            // Application code is probably wrong - throw informative exception
            string message = string.Format("The IPublishedContent instance is a document of type {0}, which does not match the requested type {1}",
                content.GetType(), typeof(TDocument));
            throw new ArgumentException(message, "content");
        }

        /// <summary>
        /// Creates a sequence of document type models based on a sequence of content items
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="items"></param>
        /// <returns></returns>
        public static IEnumerable<T> As<T>(this IEnumerable<IPublishedContent> items)
            where T : PublishedContentModel
        {
            return items.Select(As<T>);
        }
    }
}
